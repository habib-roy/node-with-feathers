# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_EMAIL with the service account email, GKE_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, REGISTRY_HOSTNAME and DEPLOYMENT_NAME environment variables (below).

name: Build and Deploy to GKE

on:
  push:
    branches:
    - master

# Environment variables available to all jobs and steps in this workflow
env:
  GITHUB_SHA: ${{ github.sha }}
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_KEY: ${{ secrets.GKE_KEY }}
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_DEPLOYMENT_NAME: ${{ secrets.GKE_DEPLOYMENT_NAME }}
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
  REGISTRY_HOSTNAME: ${{ secrets.REGISTRY_HOSTNAME }}
  ENV_HOST: ${{ secrets.ENV_HOST }}
  ENV_PORT: ${{ secrets.ENV_PORT }}
  ENV_PUBLIC: ${{ secrets.ENV_PUBLIC }}
  ENV_PAGINATE: ${{ secrets.ENV_PAGINATE }}
  ENV_AUTHENTICATION: ${{ secrets.ENV_AUTHENTICATION }}
  ENV_MYSQL: ${{ secrets.ENV_MYSQL }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_email: ${{ secrets.GKE_EMAIL }}
        service_account_key: ${{ secrets.GKE_KEY }}

    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |
        # Set up docker to authenticate
        # via gcloud command-line tool.
        gcloud auth configure-docker
      
    # Build the Docker image
    - name: Build
      run: |        
        docker build -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE_NAME":"$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |
        docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE_NAME:$GITHUB_SHA

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone $GKE_ZONE --project "$GKE_PROJECT"
        kubectl apply -f deployment.yml -f service.yml
        kubectl set env --all deployment/"$GKE_DEPLOYMENT_NAME" HOST="$ENV_HOST" PORT="$ENV_PORT" PUBLIC="$ENV_PUBLIC" PAGINATE="$ENV_PAGINATE" AUTHENTICATION="$ENV_AUTHENTICATION" MYSQL="$ENV_MYSQL" -o yaml
        kubectl set image -f deployment.yml api="$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE_NAME":"$GITHUB_SHA" -o yaml
        # kubectl rollout status deployment/"$GKE_DEPLOYMENT_NAME"
        # kubectl get services -o wide
